using System.Threading;
using System.Globalization;
using System.Reflection;
using System.IO;
using System.IO.IsolatedStorage;
using System.Text;
using System.Windows;
using System.Xml;
using System.Collections.Generic;
using Epi.Menu;
using Epi;
using System;

//using MultiLang;
//using System;
//using System.Collections;
//using System.ComponentModel;

namespace MultiLang
{
    public partial class SelectLanguage : Window
    {
        public SelectLanguage()
        {
            InitializeComponent();
        }

        //----------------------------------------------
        //Enums
        //----------------------------------------------
        public enum enumStartupMode
        {
            UseDefaultCulture = 0,
            UseSavedCulture = 1,
            ShowDialog = 2
        }

        private enum enumCultureMatch
        {
            None = 0,
            Language = 1,
            Neutral = 2,
            Region = 3
        }

        //----------------------------------------------
        //Member Variables
        //----------------------------------------------
        private enumStartupMode StartupMode;
        private CultureInfo SelectedCulture;

        // The array of supported cultures is updated automatically by Multi-Language for Visual Studio
        private static string[] SupportedCultures = { "es", "pt", "uk", "en-US", "fr-FR" } ; //MLHIDE

        //----------------------------------------------
        //Public Methods
        //----------------------------------------------
        public void LoadSettingsAndShow()
        {
            LoadSettingsAndShow(false);
        }

        public void LoadSettingsAndShow(bool ForceShow)
        {
            LoadSettings();

            //if (ForceShow || (StartupMode == enumStartupMode.ShowDialog))
            //{
            //this.ShowDialog();

            //if (lstCultures.SelectedItem != null)
            //{
            //    SelectedCulture = (CultureInfo)lstCultures.SelectedItem;
            //}

            //LoadConfig();
            string Language_Perm_str1 = " ";
            object langvar1;

            try
            {
                langvar1 = EpiInfoMenuManager.GetPermanentVariableValue("LanguageSettings_Perm"); //MLHIDE
                Language_Perm_str1 = langvar1.ToString();
            }
            catch
            {
                Language_Perm_str1 = "English";

            }

            if (Language_Perm_str1 != null)
            {
                switch (Language_Perm_str1)
                {
                    case "French":                                    //MLHIDE
                        SelectedCulture = System.Globalization.CultureInfo.GetCultureInfo("fr-FR"); //MLHIDE
                        break;

                    case "Spanish":                                   //MLHIDE
                        SelectedCulture = System.Globalization.CultureInfo.GetCultureInfo("es-ES"); //MLHIDE
                        break;

                    case "Ukrainian":                                 //MLHIDE
                        SelectedCulture = System.Globalization.CultureInfo.GetCultureInfo("uk"); //MLHIDE
                        break;

                    case "Portuguese":                                //MLHIDE
                        SelectedCulture = System.Globalization.CultureInfo.GetCultureInfo("pt"); //MLHIDE
                        break;

                    default:
                        SelectedCulture = System.Globalization.CultureInfo.GetCultureInfo("en-US"); //MLHIDE
                        break;
                }
            }


            SaveSettings();
            //}

            if (StartupMode != enumStartupMode.UseDefaultCulture)
            {
                if (SelectedCulture != null)
                {
                    // Actually change the culture of the current thread.
                    Thread.CurrentThread.CurrentUICulture = SelectedCulture;

                    if (ForceShow)
                    {
#if true
                        // The code generated by VS.NET cannot be used to change the 
                        // language of an active form. Show a message to this effect.
                        MessageBox.Show("The settings have been saved.\n" +
                                        "The language change will take full effect the next time you start the program.",
                                        "Select language",
                                        MessageBoxButton.OK);
#else
            MLRuntime.MLRuntime.BroadcastLanguageChanged() ;
#endif
                    }
                }
            }
        }

        //----------------------------------------------
        //Private Methods
        //----------------------------------------------

        //
        // SaveSettings and LoadSettings use an XML file, saved in so called
        // Isolated Storage.
        //
        // I'm not convinced that this is really the best way or the best place
        // to store this information, but it's certainly a .NET way to do it.
        //
        private void LoadSettings()
        {
            // Set the defaults
            StartupMode = enumStartupMode.ShowDialog;
            SelectedCulture = Thread.CurrentThread.CurrentUICulture;

            // Create an IsolatedStorageFile object and get the store
            // for this application.
            IsolatedStorageFile isoStorage = IsolatedStorageFile.GetUserStoreForDomain();

            // Check whether the file exists
            if (isoStorage.GetFileNames("CultureSettings.xml").Length > 0) //MLHIDE
            {
                // Create isoStorage StreamReader.
                StreamReader stmReader = new StreamReader
                                             (new IsolatedStorageFileStream
                                                   ("CultureSettings.xml",
                                                    FileMode.Open,
                                                    isoStorage)); //MLHIDE

                XmlTextReader xmlReader = new XmlTextReader(stmReader);

                // Loop through the XML file until all Nodes have been read and processed.
                while (xmlReader.Read())
                {
                    switch (xmlReader.Name)
                    {
                        case "StartupMode":                                         //MLHIDE
                            StartupMode = (enumStartupMode)int.Parse(xmlReader.ReadString());
                            break;
                        case "Culture":                                             //MLHIDE
                            string CultName = xmlReader.ReadString();
                            CultureInfo CultInfo = new CultureInfo(CultName);
                            SelectedCulture = CultInfo;
                            break;
                    }
                }

                // Close the reader
                xmlReader.Close();
                stmReader.Close();

            }

            isoStorage.Close();
        }

        private void SaveSettings()
        {

            // Get an isolated store for user, domain, and assembly and put it into 
            // an IsolatedStorageFile object.
            IsolatedStorageFile isoStorage = IsolatedStorageFile.GetUserStoreForDomain();

            // Create isoStorage StreamWriter and assign it to an XmlTextWriter variable.
            IsolatedStorageFileStream stmWriter = new IsolatedStorageFileStream("CultureSettings.xml", FileMode.Create, isoStorage); //MLHIDE
            XmlTextWriter writer = new XmlTextWriter(stmWriter, Encoding.UTF8);

            writer.Formatting = Formatting.Indented;
            writer.WriteStartDocument();
            writer.WriteStartElement("CultureSettings");                     //MLHIDE
            writer.WriteStartElement("StartupMode");                         //MLHIDE
            writer.WriteString(((int)StartupMode).ToString());
            writer.WriteEndElement();
            writer.WriteStartElement("Culture");                             //MLHIDE
            writer.WriteString(SelectedCulture.Name);
            writer.WriteEndElement();
            writer.WriteEndElement();
            writer.Flush();
            writer.Close();

            stmWriter.Close();
            isoStorage.Close();
        }

        private void SelectLanguage_Load(object sender, System.EventArgs e)
        {
            enumCultureMatch Match = enumCultureMatch.None;
            string AsmLocation = Assembly.GetExecutingAssembly().Location;
            string AsmPath = Path.GetDirectoryName(AsmLocation);
            List<string> DirList = new List<string>();
            enumCultureMatch NewMatch = enumCultureMatch.None;

            DirList.AddRange(Directory.GetDirectories(AsmPath, "??"));
            DirList.AddRange(Directory.GetDirectories(AsmPath, "??-??*"));

#if False
      foreach ( string BaseName in ml.SupportedCultures )
      {
        try
        {
#else
            foreach (string SubDirName in DirList)
            {
                try
                {
                    string BaseName = Path.GetFileName(SubDirName);
#endif
                    CultureInfo Cult = new CultureInfo(BaseName);

                    // Note: The property lstCultures.DisplayName is set to "NativeName" in order to
                    //       show language name in its own language.
                    lstCultures.Items.Add(Cult);

                    // The rest of this logic is just to find the nearest match to the 
                    // current UI culture.
                    // How well does this culture match?        
                    if (SelectedCulture.Equals(Cult))
                    {
                        NewMatch = enumCultureMatch.Region;
                    }
                    else if (Cult.TwoLetterISOLanguageName == SelectedCulture.TwoLetterISOLanguageName)
                    {
                        if (Cult.IsNeutralCulture)
                            NewMatch = enumCultureMatch.Neutral;
                        else
                            NewMatch = enumCultureMatch.Language;
                    }

                    // Is that better than the best match so far?
                    if (NewMatch > Match)
                    {
                        Match = NewMatch;
                        lstCultures.SelectedItem = Cult;
                    }
                }
                catch
                {
                }
            }

            switch (StartupMode)
            {
                case enumStartupMode.ShowDialog:
                    rbShow.IsChecked = true;
                    break;
                case enumStartupMode.UseDefaultCulture:
                    rbDefault.IsChecked = true;
                    break;
                case enumStartupMode.UseSavedCulture:
                    rbSelected.IsChecked = true;
                    break;
            }

        }

        private void btOK_Click(object sender, System.EventArgs e)
        {
            if (lstCultures.SelectedItem != null)
            {
                SelectedCulture = (CultureInfo)lstCultures.SelectedItem;
            }
            this.Close();
        }

        private void OnStartup_CheckedChanged(object sender, System.EventArgs e)
        {
            if (rbShow.IsChecked.GetValueOrDefault())
                StartupMode = enumStartupMode.ShowDialog;
            else if (rbSelected.IsChecked.GetValueOrDefault())
                StartupMode = enumStartupMode.UseSavedCulture;
            else if (rbDefault.IsChecked.GetValueOrDefault())
                StartupMode = enumStartupMode.UseDefaultCulture;
        }
        protected bool LoadConfig()
        {
            string configFilePath = Configuration.DefaultConfigurationPath;
            bool configurationOk = true;
            try
            {
                string directoryName = System.IO.Path.GetDirectoryName(configFilePath);
                if (!Directory.Exists(directoryName))
                {
                    Directory.CreateDirectory(directoryName);
                }

                if (!File.Exists(configFilePath))
                {
                    Configuration defaultConfig = Configuration.CreateDefaultConfiguration();
                    Configuration.Save(defaultConfig);
                }

                Configuration.Load(configFilePath);
            }
            catch (Epi.ConfigurationException)
            {
            }
            catch (Exception ex)
            {
                configurationOk = String.IsNullOrEmpty(ex.Message);
            }
            return configurationOk;
        }

    }
}
